---
- name: Erzeuge einen Server in der Hetzner Cloud
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Erstelle den Server NPM
      hetzner.hcloud.hcloud_server:
        state: present
        name: NginxProxyManager
        server_type: cax11
        image: ubuntu-24.04
        ssh_keys:
          - HetznerMediaProjekt
        private_networks:
          - Media-Central
        api_token: "{{ HETZNER_CLOUD }}"
      register: hcloud_server_result

    - name: Show hcloud_server_result
      debug:
        var: hcloud_server_result

    - name: Füge den neuen Server zum Inventory hinzu
      add_host:
        name: "{{ hcloud_server_result.hcloud_server.ipv4_address }}"
        groups: created_servers
        ansible_user: root

    - name: Warte, bis SSH verfügbar ist
      wait_for:
        host: "{{ hcloud_server_result.hcloud_server.ipv4_address }}"
        port: 22
        delay: 10
        timeout: 300

- name: Konfiguriere den Server - Docker installieren und Nginx Proxy Manager deployen
  hosts: created_servers
  become: true
  gather_facts: true
  vars:
    domain: mediatoken.de
  tasks:
    - name: Aktualisiere den Apt-Cache
      apt:
        update_cache: true

    - name: Installiere benötigte Pakete
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
        state: present

    - name: Docker GPG-Schlüssel hinzufügen
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Docker Repository hinzufügen
      apt_repository:
        repo: "deb [arch=arm64] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable"
        state: present

    - name: Aktualisiere Apt-Cache nach dem Hinzufügen des Repositories
      apt:
        update_cache: true

    - name: Docker installieren
      apt:
        name: docker-ce
        state: present

    - name: Docker Compose Plugin installieren
      apt:
        name: docker-compose-plugin
        state: present

    - name: Erstelle Verzeichnisse für Nginx Proxy Manager
      file:
        path: "{{ item }}"
        state: directory
        mode: "0755"
      loop:
        - /root/npm/data
        - /root/npm/letsencrypt

    - name: Kopiere die Docker Compose Datei für Nginx Proxy Manager
      copy:
        dest: /root/npm/docker-compose.yml
        content: |
          version: "3"
          services:
            app:
              image: jc21/nginx-proxy-manager:latest
              container_name: nginx-proxy-manager
              restart: unless-stopped
              ports:
                - "80:80"
                - "81:81"
                - "443:443"
              volumes:
                - ./data:/data
                - ./letsencrypt:/etc/letsencrypt
              environment:
                INITIAL_ADMIN_EMAIL: "{{ NPM_ADMIN_EMAIL }}"
                INITIAL_ADMIN_PASSWORD: "{{ NPM_ADMIN_PASSWORD }}"

    - name: Starte den Nginx Proxy Manager Container via Docker Compose
      shell: docker compose -f /root/npm/docker-compose.yml up -d
      args:
        chdir: /root/npm

    # --- DNS-Verwaltung via Hetzner DNS API ---
    - name: Hole Zone ID für {{ domain }}
      uri:
        url: "https://dns.hetzner.com/api/v1/zones"
        method: GET
        headers:
          Auth-API-Token: "{{ HETZNER_API_TOKEN }}"
        return_content: yes
      delegate_to: localhost
      register: zones_response

    - name: Setze Zone ID Fakt
      set_fact:
        zone_id: "{{ (zones_response.json.zones | selectattr('name', 'equalto', domain) | list)[0].id }}"

    - name: Hole DNS Records für {{ domain }}
      uri:
        url: "https://dns.hetzner.com/api/v1/records?zone_id={{ zone_id }}"
        method: GET
        headers:
          Auth-API-Token: "{{ HETZNER_API_TOKEN }}"
        return_content: yes
      delegate_to: localhost
      register: dns_records_response

    - name: Setze A Record Fakt für *.{{ domain }}
      set_fact:
        dns_a_wildcard: "{{ dns_records_response.json.records | selectattr('name', 'equalto', '*') | selectattr('type', 'equalto', 'A') | list }}"

    - name: Setze DNS A Record für *.{{ domain }} falls notwendig
      block:
        - name: Aktualisiere bestehenden Wildcard-A Record für *.{{ domain }}
          uri:
            url: "https://dns.hetzner.com/api/v1/records/{{ dns_a_wildcard[0].id }}"
            method: PUT
            headers:
              Auth-API-Token: "{{ HETZNER_API_TOKEN }}"
              Content-Type: "application/json"
            body: "{{ {'name': '*', 'type': 'A', 'value': hostvars['localhost'].hcloud_server_result.hcloud_server.ipv4_address, 'ttl': 300, 'zone_id': zone_id} | to_json }}"
            status_code: [200, 201]
          delegate_to: localhost
          when: dns_a_wildcard | length > 0
        - name: Erstelle Wildcard-A Record für *.{{ domain }}
          uri:
            url: "https://dns.hetzner.com/api/v1/records"
            method: POST
            headers:
              Auth-API-Token: "{{ HETZNER_API_TOKEN }}"
              Content-Type: "application/json"
            body: "{{ {'name': '*', 'type': 'A', 'value': hostvars['localhost'].hcloud_server_result.hcloud_server.ipv4_address, 'ttl': 300, 'zone_id': zone_id} | to_json }}"
            status_code: [200, 201]
          delegate_to: localhost
          when: dns_a_wildcard | length == 0
      when: (dns_a_wildcard | length == 0) or (dns_a_wildcard[0].value != hostvars['localhost'].hcloud_server_result.hcloud_server.ipv4_address)

    - name: Remove all tokens
      shell: "/usr/bin/rm -fr /root/npm/token/*"
      register: npm_remove_tokens_output

    - name: Show remove tokens output
      debug:
        var: npm_remove_tokens_output

    - name: Registriere npm Domain im Nginx Proxy Manager via Bash Script
      shell: "/root/npm/nginx_proxy_manager_cli.sh -d npm.{{ domain }} -i {{ hostvars['localhost'].hcloud_server_result.hcloud_server.ipv4_address }} -p 8080"
      register: npm_registration_output

    - name: Show domain registration output
      debug:
        var: npm_registration_output

    - name: Create ssl certificate for npm.{{ domain }}
      shell: "/root/npm/nginx_proxy_manager_cli.sh --generate-cert npm.{{ domain }} {{ NPM_ADMIN_EMAIL }} -y"
      register: npm_create_ssl_output

    - name: Show create ssl certificate output
      debug:
        var: npm_create_ssl_output

    - name: Find the id of the domain npm.{{ domain }}
      shell: "/root/npm/nginx_proxy_manager_cli.sh --host-search npm.{{ domain }} | grep id: | cut -d' ' -f4"
      register: npm_get_domain_id_output

    - name: Show domain list output
      debug:
        var: npm_get_domain_id_output

    - name: Connect domain to ssl certificate
      shell: "/root/npm/nginx_proxy_manager_cli.sh --host-ssl-enable {{ npm_get_domain_id_output }}"
      register: npm_connect_domain_to_ssl_output

    - name: Show connect domain to ssl certificate output
      debug:
        var: npm_connect_domain_to_ssl_output
