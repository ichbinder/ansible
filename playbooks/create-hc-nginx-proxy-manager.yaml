---
- name: Create a Server in Hetzner Cloud
  hosts: localhost
  gather_facts: false
  vars:
    domain: mediatoken.de
  tasks:
    - name: Create the NPM Server
      hetzner.hcloud.hcloud_server:
        state: present
        name: NginxProxyManager
        server_type: cax11
        image: ubuntu-24.04
        ssh_keys:
          - HetznerMediaProjekt
        private_networks:
          - Media-Central
        api_token: "{{ HETZNER_CLOUD }}"
      register: hcloud_server_result

    - name: Show hcloud_server_result
      debug:
        var: hcloud_server_result

    - name: Add the new server to the inventory
      add_host:
        name: "{{ hcloud_server_result.hcloud_server.ipv4_address }}"
        groups: created_servers
        ansible_user: root

    - name: Wait until SSH is available
      wait_for:
        host: "{{ hcloud_server_result.hcloud_server.ipv4_address }}"
        port: 22
        delay: 10
        timeout: 300

- name: Configure the Server - Install Docker and Deploy Nginx Proxy Manager
  hosts: created_servers
  become: true
  gather_facts: true
  vars:
    domain: mediatoken.de
  tasks:
    - name: Update the Apt cache
      apt:
        update_cache: true

    - name: Install required packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
        state: present

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=arm64] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable"
        state: present

    - name: Update the Apt cache after adding the repository
      apt:
        update_cache: true

    - name: Install Docker
      apt:
        name: docker-ce
        state: present

    - name: Install Docker Compose plugin
      apt:
        name: docker-compose-plugin
        state: present

    - name: Create directories for Nginx Proxy Manager
      file:
        path: "{{ item }}"
        state: directory
        mode: "0755"
      loop:
        - /root/npm/data
        - /root/npm/letsencrypt

    - name: Copy the Docker Compose file for Nginx Proxy Manager
      copy:
        dest: /root/npm/docker-compose.yml
        content: |
          version: "3"
          services:
            app:
              image: jc21/nginx-proxy-manager:latest
              container_name: nginx-proxy-manager
              restart: unless-stopped
              ports:
                - "80:80"
                - "81:81"
                - "443:443"
              volumes:
                - ./data:/data
                - ./letsencrypt:/etc/letsencrypt
              environment:
                INITIAL_ADMIN_EMAIL: "{{ NPM_ADMIN_EMAIL }}"
                INITIAL_ADMIN_PASSWORD: "{{ NPM_ADMIN_PASSWORD }}"

    - name: Start the Nginx Proxy Manager container via Docker Compose
      shell: docker compose -f /root/npm/docker-compose.yml up -d
      args:
        chdir: /root/npm

    # --- DNS management via Hetzner DNS API ---
    - name: Retrieve Zone ID for {{ domain }}
      uri:
        url: "https://dns.hetzner.com/api/v1/zones"
        method: GET
        headers:
          Auth-API-Token: "{{ HETZNER_API_TOKEN }}"
        return_content: yes
      delegate_to: localhost
      register: zones_response

    - name: Set Zone ID fact
      set_fact:
        zone_id: "{{ (zones_response.json.zones | selectattr('name', 'equalto', domain) | list)[0].id }}"

    - name: Retrieve DNS records for {{ domain }}
      uri:
        url: "https://dns.hetzner.com/api/v1/records?zone_id={{ zone_id }}"
        method: GET
        headers:
          Auth-API-Token: "{{ HETZNER_API_TOKEN }}"
        return_content: yes
      delegate_to: localhost
      register: dns_records_response

    - name: Set A record fact for *.{{ domain }}
      set_fact:
        dns_a_wildcard: "{{ dns_records_response.json.records | selectattr('name', 'equalto', '*') | selectattr('type', 'equalto', 'A') | list }}"

    - name: Set DNS A record for *.{{ domain }} if necessary
      block:
        - name: Update existing wildcard A record for *.{{ domain }}
          uri:
            url: "https://dns.hetzner.com/api/v1/records/{{ dns_a_wildcard[0].id }}"
            method: PUT
            headers:
              Auth-API-Token: "{{ HETZNER_API_TOKEN }}"
              Content-Type: "application/json"
            body: "{{ {'name': '*', 'type': 'A', 'value': hostvars['localhost'].hcloud_server_result.hcloud_server.ipv4_address, 'ttl': 300, 'zone_id': zone_id} | to_json }}"
            status_code: [200, 201]
          delegate_to: localhost
          when: dns_a_wildcard | length > 0
        - name: Create wildcard A record for *.{{ domain }}
          uri:
            url: "https://dns.hetzner.com/api/v1/records"
            method: POST
            headers:
              Auth-API-Token: "{{ HETZNER_API_TOKEN }}"
              Content-Type: "application/json"
            body: "{{ {'name': '*', 'type': 'A', 'value': hostvars['localhost'].hcloud_server_result.hcloud_server.ipv4_address, 'ttl': 300, 'zone_id': zone_id} | to_json }}"
            status_code: [200, 201]
          delegate_to: localhost
          when: dns_a_wildcard | length == 0
      when: (dns_a_wildcard | length == 0) or (dns_a_wildcard[0].value != hostvars['localhost'].hcloud_server_result.hcloud_server.ipv4_address)

- name: Run tasks with additional variables
  hosts: localhost
  become: true
  gather_facts: true
  vars:
    domain: npm.mediatoken.de
  tasks:
    - include_tasks: add-domain-ssl-npm.yaml
      vars:
        DOMAIN: "{{ domain }}"
        IP: "{{ hostvars['localhost'].hcloud_server_result.hcloud_server.ipv4_address }}"
        NPM_ADMIN_EMAIL: "{{ NPM_ADMIN_EMAIL }}"
        PORT: "81"
