---
- name: Erzeuge einen Server in der Hetzner Cloud
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Erstelle den Server NPM
      hetzner.hcloud.hcloud_server:
        state: present
        name: NginxProxyManager
        server_type: cax11
        image: ubuntu-24.04
        ssh_keys:
          - HetznerMediaProjekt
        private_networks:
          - Media-Central
        api_token: "{{ HETZNER_CLOUD }}"
      register: hcloud_server_result

    - name: Füge den neuen Server zum Inventory hinzu
      add_host:
        name: "{{ hcloud_server_result.hcloud_server.ipv4_address }}"
        groups: created_servers
        ansible_user: root

    - name: Warte, bis SSH verfügbar ist
      wait_for:
        host: "{{ hcloud_server_result.hcloud_server.ipv4_address }}"
        port: 22
        delay: 10
        timeout: 300

- name: Konfiguriere den Server - Docker installieren und Nginx Proxy Manager deployen
  hosts: created_servers
  become: true
  gather_facts: true
  tasks:
    # - name: Aktualisiere den Apt-Cache
    #   apt:
    #     update_cache: true

    # - name: Installiere benötigte Pakete
    #   apt:
    #     name:
    #       - apt-transport-https
    #       - ca-certificates
    #       - curl
    #       - software-properties-common
    #     state: present

    # - name: Docker GPG-Schlüssel hinzufügen
    #   apt_key:
    #     url: https://download.docker.com/linux/ubuntu/gpg
    #     state: present

    # - name: Docker Repository hinzufügen
    #   apt_repository:
    #     repo: "deb [arch=arm64] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable"
    #     state: present

    # - name: Aktualisiere Apt-Cache nach dem Hinzufügen des Repositories
    #   apt:
    #     update_cache: true

    # - name: Docker installieren
    #   apt:
    #     name: docker-ce
    #     state: present

    # - name: Docker Compose Plugin installieren
    #   apt:
    #     name: docker-compose-plugin
    #     state: present

    # - name: Erstelle Verzeichnisse für Nginx Proxy Manager
    #   file:
    #     path: "{{ item }}"
    #     state: directory
    #     mode: "0755"
    #   loop:
    #     - /root/npm/data
    #     - /root/npm/letsencrypt

    # - name: Kopiere die Docker Compose Datei für Nginx Proxy Manager
    #   copy:
    #     dest: /root/npm/docker-compose.yml
    #     content: |
    #       version: "3"
    #       services:
    #         app:
    #           image: jc21/nginx-proxy-manager:latest
    #           container_name: nginx-proxy-manager
    #           restart: unless-stopped
    #           ports:
    #             - "80:80"
    #             - "81:81"
    #             - "443:443"
    #           volumes:
    #             - ./data:/data
    #             - ./letsencrypt:/etc/letsencrypt

    # - name: Starte den Nginx Proxy Manager Container via Docker Compose
    #   shell: docker compose -f /root/npm/docker-compose.yml up -d
    #   args:
    #     chdir: /root/npm

    # --- DNS-Verwaltung via Hetzner DNS API ---
    - name: Hole Zone ID für nettoken.de
      uri:
        url: "https://dns.hetzner.com/api/v1/zones"
        method: GET
        headers:
          Auth-API-Token: "{{ HETZNER_API_TOKEN }}"
        return_content: yes
      delegate_to: localhost
      register: zones_response

    - name: Setze Zone ID Fakt
      set_fact:
        zone_id: "{{ (zones_response.json.zones | selectattr('name', 'equalto', 'nettoken.de') | list)[0].id }}"

    - name: Hole DNS Records für nettoken.de
      uri:
        url: "https://dns.hetzner.com/api/v1/records?zone_id={{ zone_id }}"
        method: GET
        headers:
          Auth-API-Token: "{{ HETZNER_API_TOKEN }}"
        return_content: yes
      delegate_to: localhost
      register: dns_records_response

    - name: Setze A Record Fakt für *.nettoken.de
      set_fact:
        dns_a_wildcard: "{{ dns_records_response.json.records | selectattr('name', 'equalto', '*') | selectattr('type', 'equalto', 'A') | list }}"

    - name: Debug DNS A Records
      debug:
        msg: "Aktuelle A Records: nettoken.de: {{ dns_a_apex }}, *.nettoken.de: {{ dns_a_wildcard }}"

    - name: Setze DNS A Record für *.nettoken.de falls notwendig
      block:
        - name: Aktualisiere bestehenden Wildcard-A Record für *.nettoken.de
          uri:
            url: "https://dns.hetzner.com/api/v1/records/{{ dns_a_wildcard[0].id }}"
            method: PUT
            headers:
              Auth-API-Token: "{{ HETZNER_API_TOKEN }}"
              Content-Type: "application/json"
            body: "{{ {'name': '*', 'type': 'A', 'value': hostvars['localhost'].hcloud_server_result.hcloud_server.ipv4_address, 'ttl': 300, 'zone_id': zone_id} | to_json }}"
            status_code: [200, 201]
          delegate_to: localhost
          when: dns_a_wildcard | length > 0
        - name: Erstelle Wildcard-A Record für *.nettoken.de
          uri:
            url: "https://dns.hetzner.com/api/v1/records"
            method: POST
            headers:
              Auth-API-Token: "{{ HETZNER_API_TOKEN }}"
              Content-Type: "application/json"
            body: "{{ {'name': '*', 'type': 'A', 'value': hostvars['localhost'].hcloud_server_result.hcloud_server.ipv4_address, 'ttl': 300, 'zone_id': zone_id} | to_json }}"
            status_code: [200, 201]
          delegate_to: localhost
          when: dns_a_wildcard | length == 0
      when: (dns_a_wildcard | length == 0) or (dns_a_wildcard[0].value != hostvars['localhost'].hcloud_server_result.hcloud_server.ipv4_address)

    - name: Setze AAAA Record Fakt für *.nettoken.de
      set_fact:
        dns_aaaa_wildcard: "{{ dns_records_response.json.records | selectattr('name', 'equalto', '*.nettoken.de') | selectattr('type', 'equalto', 'AAAA') | list }}"
      when: hostvars['localhost'].hcloud_server_result.hcloud_server.ipv6_address is defined

    - name: Debug DNS AAAA Records
      debug:
        msg: "Aktuelle AAAA Records: nettoken.de: {{ dns_aaaa_apex }}, *.nettoken.de: {{ dns_aaaa_wildcard }}"
      when: hostvars['localhost'].hcloud_server_result.hcloud_server.ipv6_address is defined

    - name: Setze DNS AAAA Record für *.nettoken.de falls notwendig
      block:
        - name: Aktualisiere bestehenden Wildcard-AAAA Record für *.nettoken.de
          uri:
            url: "https://dns.hetzner.com/api/v1/records/{{ dns_aaaa_wildcard[0].id }}"
            method: PUT
            headers:
              Auth-API-Token: "{{ HETZNER_API_TOKEN }}"
              Content-Type: "application/json"
            body: "{{ {'name': '*', 'type': 'AAAA', 'value': hostvars['localhost'].hcloud_server_result.hcloud_server.ipv6_address, 'ttl': 300, 'zone_id': zone_id} | to_json }}"
            status_code: [200, 201]
          delegate_to: localhost
          when: dns_aaaa_wildcard | length > 0
        - name: Erstelle Wildcard-AAAA Record für *.nettoken.de
          uri:
            url: "https://dns.hetzner.com/api/v1/records"
            method: POST
            headers:
              Auth-API-Token: "{{ HETZNER_API_TOKEN }}"
              Content-Type: "application/json"
            body: "{{ {'name': '*', 'type': 'AAAA', 'value': hostvars['localhost'].hcloud_server_result.hcloud_server.ipv6_address, 'ttl': 300, 'zone_id': zone_id} | to_json }}"
            status_code: [200, 201]
          delegate_to: localhost
          when: dns_aaaa_wildcard | length == 0
      when: hostvars['localhost'].hcloud_server_result.hcloud_server.ipv6_address is defined and ((dns_aaaa_wildcard | length == 0) or (dns_aaaa_wildcard[0].value != hostvars['localhost'].hcloud_server_result.hcloud_server.ipv6_address))
