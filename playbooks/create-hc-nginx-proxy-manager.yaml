---
- name: Erzeuge einen Server in der Hetzner Cloud
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Erstelle den Server NPM
      hetzner.hcloud.hcloud_server:
        state: present
        name: NginxProxyManager
        server_type: cax11
        image: ubuntu-24.04
        ssh_keys:
          - HetznerMediaProjekt
        private_networks:
          - Media-Central
        api_token: "{{ HETZNER_CLOUD }}"
      register: hcloud_server_result

    - name: Füge den neuen Server zum Inventory hinzu
      add_host:
        name: "{{ hcloud_server_result.hcloud_server.ipv4_address }}"
        groups: created_servers
        ansible_user: root

    - name: Warte, bis SSH verfügbar ist
      wait_for:
        host: "{{ hcloud_server_result.hcloud_server.ipv4_address }}"
        port: 22
        delay: 10
        timeout: 300

- name: Konfiguriere den Server - Docker installieren und Nginx Proxy Manager deployen
  hosts: created_servers
  become: true
  gather_facts: true
  tasks:
    - name: Aktualisiere den Apt-Cache
      apt:
        update_cache: true

    - name: Installiere benötigte Pakete
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
        state: present

    - name: Docker GPG-Schlüssel hinzufügen
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Docker Repository hinzufügen
      apt_repository:
        repo: "deb [arch=arm64] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable"
        state: present

    - name: Aktualisiere Apt-Cache nach dem Hinzufügen des Repositories
      apt:
        update_cache: true

    - name: Docker installieren
      apt:
        name: docker-ce
        state: present

    - name: Docker Compose Plugin installieren
      apt:
        name: docker-compose-plugin
        state: present

    - name: Erstelle Verzeichnisse für Nginx Proxy Manager
      file:
        path: "{{ item }}"
        state: directory
        mode: "0755"
      loop:
        - /root/npm/data
        - /root/npm/letsencrypt

    - name: Kopiere die Docker Compose Datei für Nginx Proxy Manager
      copy:
        dest: /root/npm/docker-compose.yml
        content: |
          version: "3"
          services:
            app:
              image: jc21/nginx-proxy-manager:latest
              container_name: nginx-proxy-manager
              restart: unless-stopped
              ports:
                - "80:80"
                - "81:81"
                - "443:443"
              volumes:
                - ./data:/data
                - ./letsencrypt:/etc/letsencrypt

    - name: Starte den Nginx Proxy Manager Container via Docker Compose
      shell: docker compose -f /root/npm/docker-compose.yml up -d
      args:
        chdir: /root/npm

    - name: Hole A Records für nettoken.de (A und Wildcard)
      command: hcloud dns record list nettoken.de --output json
      register: a_records
      changed_when: false
      delegate_to: localhost

    - name: Setze A Record Fakt für nettoken.de
      set_fact:
        dns_a_apex: "{{ a_records.stdout | from_json | selectattr('name', 'equalto', 'nettoken.de') | selectattr('type', 'equalto', 'A') | list }}"

    - name: Setze A Record Fakt für *.nettoken.de
      set_fact:
        dns_a_wildcard: "{{ a_records.stdout | from_json | selectattr('name', 'equalto', '*.nettoken.de') | selectattr('type', 'equalto', 'A') | list }}"

    - name: Debug DNS A Records
      debug:
        msg: "Aktuelle A Records: nettoken.de: {{ dns_a_apex }}, *.nettoken.de: {{ dns_a_wildcard }}"

    - name: Setze DNS A Record für nettoken.de falls notwendig
      block:
        - name: Aktualisiere bestehenden A Record für nettoken.de
          command: >-
            hcloud dns record update {{ dns_a_apex[0].id }} --value {{ hcloud_server_result.hcloud_server.ipv4_address }} --ttl 300
          delegate_to: localhost
          when: dns_a_apex | length > 0
        - name: Erstelle A Record für nettoken.de
          command: >-
            hcloud dns record create nettoken.de A --name nettoken.de --value {{ hcloud_server_result.hcloud_server.ipv4_address }} --ttl 300
          delegate_to: localhost
          when: dns_a_apex | length == 0
      when: (dns_a_apex | length == 0) or (dns_a_apex[0].value != hcloud_server_result.hcloud_server.ipv4_address)

    - name: Setze DNS A Record für *.nettoken.de falls notwendig
      block:
        - name: Aktualisiere bestehenden Wildcard-A Record für *.nettoken.de
          command: >-
            hcloud dns record update {{ dns_a_wildcard[0].id }} --value {{ hcloud_server_result.hcloud_server.ipv4_address }} --ttl 300
          delegate_to: localhost
          when: dns_a_wildcard | length > 0
        - name: Erstelle Wildcard-A Record für *.nettoken.de
          command: >-
            hcloud dns record create nettoken.de A --name "*.nettoken.de" --value {{ hcloud_server_result.hcloud_server.ipv4_address }} --ttl 300
          delegate_to: localhost
          when: dns_a_wildcard | length == 0
      when: (dns_a_wildcard | length == 0) or (dns_a_wildcard[0].value != hcloud_server_result.hcloud_server.ipv4_address)

    - name: Hole AAAA Records für nettoken.de (A und Wildcard)
      command: hcloud dns record list nettoken.de --output json
      register: aaaa_records
      changed_when: false
      delegate_to: localhost
      when: hcloud_server_result.hcloud_server.ipv6_address is defined

    - name: Setze AAAA Record Fakt für nettoken.de
      set_fact:
        dns_aaaa_apex: "{{ aaaa_records.stdout | from_json | selectattr('name', 'equalto', 'nettoken.de') | selectattr('type', 'equalto', 'AAAA') | list }}"
      when: hcloud_server_result.hcloud_server.ipv6_address is defined

    - name: Setze AAAA Record Fakt für *.nettoken.de
      set_fact:
        dns_aaaa_wildcard: "{{ aaaa_records.stdout | from_json | selectattr('name', 'equalto', '*.nettoken.de') | selectattr('type', 'equalto', 'AAAA') | list }}"
      when: hcloud_server_result.hcloud_server.ipv6_address is defined

    - name: Debug DNS AAAA Records
      debug:
        msg: "Aktuelle AAAA Records: nettoken.de: {{ dns_aaaa_apex }}, *.nettoken.de: {{ dns_aaaa_wildcard }}"
      when: hcloud_server_result.hcloud_server.ipv6_address is defined

    - name: Setze DNS AAAA Record für nettoken.de falls notwendig
      block:
        - name: Aktualisiere bestehenden AAAA Record für nettoken.de
          command: >-
            hcloud dns record update {{ dns_aaaa_apex[0].id }} --value {{ hcloud_server_result.hcloud_server.ipv6_address }} --ttl 300
          delegate_to: localhost
          when: dns_aaaa_apex | length > 0
        - name: Erstelle AAAA Record für nettoken.de
          command: >-
            hcloud dns record create nettoken.de AAAA --name nettoken.de --value {{ hcloud_server_result.hcloud_server.ipv6_address }} --ttl 300
          delegate_to: localhost
          when: dns_aaaa_apex | length == 0
      when: hcloud_server_result.hcloud_server.ipv6_address is defined and ((dns_aaaa_apex | length == 0) or (dns_aaaa_apex[0].value != hcloud_server_result.hcloud_server.ipv6_address))

    - name: Setze DNS AAAA Record für *.nettoken.de falls notwendig
      block:
        - name: Aktualisiere bestehenden Wildcard-AAAA Record für *.nettoken.de
          command: >-
            hcloud dns record update {{ dns_aaaa_wildcard[0].id }} --value {{ hcloud_server_result.hcloud_server.ipv6_address }} --ttl 300
          delegate_to: localhost
          when: dns_aaaa_wildcard | length > 0
        - name: Erstelle Wildcard-AAAA Record für *.nettoken.de
          command: >-
            hcloud dns record create nettoken.de AAAA --name "*.nettoken.de" --value {{ hcloud_server_result.hcloud_server.ipv6_address }} --ttl 300
          delegate_to: localhost
          when: dns_aaaa_wildcard | length == 0
      when: hcloud_server_result.hcloud_server.ipv6_address is defined and ((dns_aaaa_wildcard | length == 0) or (dns_aaaa_wildcard[0].value != hcloud_server_result.hcloud_server.ipv6_address))
