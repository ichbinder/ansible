- name: Set default PORT if not provided externally
  set_fact:
    PORT: "{{ PORT | default('81') }}"

- name: Define BASE_URL variable using set_fact
  set_fact:
    BASE_URL: "http://{{ SERVER_IP }}:{{ PORT }}/api"

- name: Retrieve initial token from API
  uri:
    url: "{{ BASE_URL }}/tokens"
    method: POST
    headers:
      Content-Type: "application/json; charset=UTF-8"
    body:
      identity: "{{ NPM_ADMIN_EMAIL }}"
      secret: "{{ NPM_ADMIN_PASSWORD }}"
    body_format: json
    return_content: yes
  register: initial_response

- name: Set initial_token fact
  set_fact:
    initial_token: "{{ initial_response.json.token }}"

- name: Fail if initial token retrieval failed
  fail:
    msg: "Error getting initial token - Check credentials"
  when: initial_token == "null"

- name: Generate JSON payload for creating proxy host
  set_fact:
    proxy_host_payload: >-
      {{
        {
          "domain_names": [ "{{ DOMAIN }}" ],
          "forward_host": "{{ SERVER_IP }}",
          "forward_port": "{{ PORT }}",
          "ssl_forced": false,
          "caching_enabled": false,
          "block_exploits": true,
          "allow_websocket_upgrade": true,
          "http2_support": true,
          "forward_scheme": "http",
          "enabled": true,
        }
      }}

- name: Validate generated JSON payload
  assert:
    that:
      - proxy_host_payload
    fail_msg: "ERROR: Invalid JSON generated: {{ proxy_host_payload }}"

- name: Create proxy host in Nginx Proxy Manager
  uri:
    url: "{{ BASE_URL }}/nginx/proxy-hosts"
    method: POST
    headers:
      Authorization: "Bearer {{ initial_token }}"
      Content-Type: "application/json; charset=UTF-8"
    body: "{{ proxy_host_payload }}"
    status_code: [200, 201]
    body_format: json
    return_content: yes
  register: create_proxy_response

- name: Verify API response and handle errors
  ansible.builtin.fail:
    msg: "API Error: {{ create_proxy_response.content | from_json }}"
  when: create_proxy_response.status not in [200, 201]

- name: Display success message for proxy host creation
  debug:
    msg: "SUCCESS: Proxy host {{ DOMAIN }} was created successfully!"

- name: Extract proxy host ID from create_proxy_response
  set_fact:
    proxy_host_id: "{{ create_proxy_response.json.id }}"
  when: create_proxy_response.json is defined and create_proxy_response.json.id is defined

- name: Display the extracted proxy host ID
  debug:
    msg: "Extracted Proxy Host ID: {{ proxy_host_id }}"

- name: Generate JSON payload for certificate generation
  set_fact:
    certificate_payload: >
      {{
        {
          "provider": "letsencrypt",
          "domain_names": [ "{{ DOMAIN }}" ],
          "meta": {
            "dns_challenge": false,
            "letsencrypt_agree": true,
            "letsencrypt_email": "{{ NPM_ADMIN_EMAIL }}"
          }
        }
      }}

- name: Generate certificate via Nginx Proxy Manager API
  uri:
    url: "{{ BASE_URL }}/nginx/certificates"
    method: POST
    headers:
      Authorization: "Bearer {{ initial_token }}"
      Content-Type: "application/json; charset=UTF-8"
    body: "{{ certificate_payload | to_json }}"
    status_code: [200, 201]
    body_format: json
    return_content: yes
  register: cert_response
  ignore_errors: true

- name: Extract certificate ID from cert_response
  set_fact:
    certificate_id: "{{ cert_response.json[0].id }}"
  when: cert_response.json is defined and (cert_response.json | length) > 0

- name: Display the extracted certificate ID
  debug:
    msg: "Extracted Certificate ID: {{ certificate_id }}"

- name: Fail if certificate generation failed
  ansible.builtin.fail:
    msg: "â›” Failed to generate certificate. HTTP status: {{ cert_response.status }}. Response: {{ cert_response.content }}. Data sent: {{ certificate_payload | to_json }}"
  when: cert_response.status != 201

- name: Display success message for certificate generation
  debug:
    msg: "âœ… Certificate generated successfully!"
  when: cert_response.status == 201

- name: Generate JSON payload for SSL enablement
  set_fact:
    ssl_update_payload: >
      {{
        {
          "certificate_id": certificate_id,
          "ssl_forced": true,
          "http2_support": true,
          "hsts_enabled": true,
          "hsts_subdomains": false
        }
      }}

- name: Log the payload for SSL enablement
  debug:
    msg: "Data being sent for SSL enablement: {{ ssl_update_payload | to_json }}"

- name: Update proxy host for SSL enablement via Nginx Proxy Manager API
  uri:
    url: "{{ BASE_URL }}/nginx/proxy-hosts/{{ proxy_host_id }}"
    method: PUT
    headers:
      Authorization: "Bearer {{ initial_token }}"
      Content-Type: "application/json; charset=UTF-8"
    body: "{{ ssl_update_payload | to_json }}"
    body_format: json
    return_content: yes
    status_code: [200, 201]
  register: ssl_update_response
  ignore_errors: false

- name: Set HTTP response details for SSL update
  set_fact:
    http_status: "{{ ssl_update_response.status }}"
    http_body: "{{ ssl_update_response.content }}"

- name: Check SSL enablement response and provide feedback
  block:
    - name: SSL enablement succeeded
      debug:
        msg: "âœ… SSL, HTTP/2, and HSTS enabled successfully! (HTTP status: {{ http_status }})"
      when: http_status == 200

    - name: Log data sent for SSL enablement
      debug:
        msg: "ðŸ‘‰ Data sent: {{ ssl_update_payload | to_json }}"
      when: http_status != 200

    - name: Fail if SSL enablement failed
      ansible.builtin.fail:
        msg: "â›” Failed to enable SSL, HTTP/2, and HSTS. HTTP status: {{ http_status }}. Response: {{ http_body }}"
      when: http_status != 200
  when: ssl_update_response is defined
# - name: Connect domain to ssl certificate
#   shell: "/root/npm/nginx_proxy_manager_cli.sh --host-ssl-enable {{ npm_get_domain_id_output.stdout }}"
#   register: npm_connect_domain_to_ssl_output

# - name: Show connect domain to ssl certificate output
#   debug:
#     var: npm_connect_domain_to_ssl_output
